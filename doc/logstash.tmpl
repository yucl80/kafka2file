input {    
    file {
        path => ["/host/var/log/*"]
        codec => plain { charset => "GBK" }
        discover_interval => 120
        stat_interval => 2
        sincedb_path => "/host/var/log/sincedb"
        exclude => "sincedb"       
    }{{ range $k, $v := . }}
    {{ range $v.LogType }}{{ if eq . "tomcat" }}
    file {
        path => ["/logs/{{ $v.MountSource }}/rtlog/*/common-all*.log"]
        codec => plain { charset => "GBK" }
        discover_interval => 120
        stat_interval => 2
        sincedb_path => "/logs/{{ $v.MountSource }}/sincedb1"
        add_field => { "stack" => "{{ $v.Stack }}" }
        add_field => { "service" => "{{ $v.Service }}" }
        add_field => { "index" => "{{ $v.Index}}" }
        add_field => { "HOST" => "{{ $v.Host }}" }
    }
    file {
        path => "/logs/{{ $v.MountSource }}/rtlog/*/*.acc"
        discover_interval => 120
        stat_interval => 1
        sincedb_path => "/logs/{{ $v.MountSource }}/sincedb2"
        add_field => { "stack" => "{{ $v.Stack }}" }
        add_field => { "service" => "{{ $v.Service }}" }
        add_field => { "index" => "{{ $v.Index}}" }
        add_field => { "HOST" => "{{ $v.Host }}" }
    }{{ else if eq . "NONE" }}
    file {
        path => ["/jsonfile/{{ $v.ID }}/*.log"]
        codec => plain { charset => "GBK" }
        discover_interval => 120
        stat_interval => 2
        sincedb_path => "/jsonfile/{{ $v.ID }}/sincedb"
        add_field => { "stack" => "{{ $v.Stack }}" }
        add_field => { "service" => "{{ $v.Service }}" }
        add_field => { "index" => "{{ $v.Index}}" }
        add_field => { "HOST" => "{{ $v.Host }}" }
    }{{ end }}{{ end }}{{ end }}
}

filter {
  mutate {
    gsub => [
      "path", "/logs/[^/]+/_data/rtlog/([^/]+)/", "/mwbase/applogs/rtlog/\1_%{stack}-%{service}-%{index}/"
    ]
    add_field => { "containerHost" => "%{host}" }    
    remove_field => [ "host" ]
  }
  if [path] =~ "BIAM" {
      multiline {
       pattern => "^\[%{MONTHNUM}/%{MONTHDAY} %{TIME}\]"
       negate => "true"
       what => "previous"
     }
  } else if [path] =~ "common-all" {
     multiline {
      pattern => "^%{TIMESTAMP_ISO8601}"
      negate => "true"
      what => "previous"
    }
  }
  mutate {
   remove_field => ["@version","@timestamp","tags"]
   remove_tag => ["multiline"]
  }
}

output {
  if [path] =~ "\.acc" {
    kafka {
      bootstrap_servers =>"192.168.21.26:9092,192.168.21.27:9092,192.168.21.28:9092"
      topic_id =>"acclog"
      message_key => "%{host}"
      batch_size => 200
      client_id => [host]
    } 
   } else  if [path] =~ "access" {
    kafka {
      bootstrap_servers =>"192.168.21.26:9092,192.168.21.27:9092,192.168.21.28:9092"
      topic_id =>"acclog"
      message_key => "%{host}"
      batch_size => 200
    }
  } else if [path] =~ "common-all" {
    kafka {
      bootstrap_servers =>"192.168.21.26:9092,192.168.21.27:9092,192.168.21.28:9092"
      topic_id => "applog"
      message_key => "%{host}"
      compression_type => "snappy"
    } 
  } else if [path] =~ "host" {
    kafka {
      bootstrap_servers =>"192.168.21.26:9092,192.168.21.27:9092,192.168.21.28:9092"
      topic_id => "hostsyslog"
      message_key => "%{host}"
      compression_type => "snappy"
    } 
  } else if [path] =~ "jsonfile" {
    kafka {
      bootstrap_servers =>"192.168.21.26:9092,192.168.21.27:9092,192.168.21.28:9092"
      topic_id => "container"
      message_key => "%{host}"
      compression_type => "snappy"
    } 
  }
 }